TODO:

1. When a 'ClientRequestsStoreChunk' is sent to the server, and the server hasn't stored that chunk yet, availableChunkServers doesn't automatically create 3 chunks and add them to the chunkcache for every triplet of servers that it gives out. This means that if another requests to store the same chunk comes immediately after the first, before there is a chance for the recommendations structure to be updated, we could store twice. Therefore, it should modify the data structure and add the three servers that it recommends as three chunks into recommendations. Then, if the message isn't actually sent out, the chunks can be removed.

2. Need to send CONTROLLER_REQUESTS_FILE_FORWARD to replication servers that have a replication of a chunk held by a deregistered chunk server. If the server acknowledges the request, add the relevant file to the DistributedFileCache with the replacement chunk server's identifier. Maybe send a heartbeat to the replacement chunk server first in order to check if it is alive. May need to actually daisy chain TCP connections to actually get it done. Best effort may not work if we are tyring to keep the recommendations server synchronized with who has actually received the request.

3. REQUESTS_SHARD and SEND_FILE_FOR_STORAGE in TCPReceiverThread is still unfinished. It relies on some functions that need to be written in the FileDistributionService which will read shard files and check if they are corrupt.

4. Create a message called CHUNK_SERVER_REPORTS_FILE_HEALTHY, that will be sent to the controller following a fix to a chunk server's file, which could be a result of a slice request or a file forward.

5. SEND_FILE_FOR_STORAGE will send messages to the controller about Chunk Servers that it can't connect to. It will also send messages to the controller about chunk servers that don't acknowledge the file that was sent to them. When the Controller receives a message like this, it will remove the chunk from its recommendations DistributedFileCache. It won't try to forward immediately. That will just result in more confusion, because there won't have been enough time to actually get confirmation that chunk servers have the file (they inform the controller through heartbeats). So, part of the heartbeat structure now has to include a section where files without three replications in the recommendations cache will be given a third replication server that isn't the other two, and those messages will be sent out of the heartbeat channel.

6. Finish the logic in the FileDistributionService's run method so that it can handle messages of corruption and fowrading as they come through.

7. Finish the 'deregister' function in the ChunkServerConnectionCache. New nomes must be found for files that the deregistering node is taking down with it.